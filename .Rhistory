```
## Coefficients
```{r coef in lasso regression}
coef(lasso, s = 'lambda.min', exact = TRUE)
min(lasso$cvm)
```
From the coefficient of lasso regression model, the variables of `Rooms`, `Type`, `Distance`, `Postcode`,  `Bathroom`, `YearBuilt`, `Lattitude`, and `Longtitude` are related with response variable `Price`.
## Lasso Results
```{r lasso fit, include=TRUE, results='markup'}
set.seed(999)
lasso_pred <- as.numeric(exp(predict(lasso, newx = test.X, s = "lambda.min"))-1)
hist(lasso_pred, main="Histogram of Lasso Predictions", xlab = "Predictions")
mse_lasso_1 = sum((lasso_pred-exp(test.y))^2)/length(test.y)
r.2.lasso_1 <- r2(lasso_pred, test$Price)
```
## Lasso Prediction
```{r lasso predict, include=TRUE, results='markup'}
plot(exp(test.y),lasso_pred,xlab="True  price",ylab="Predicted price",
main="Prediction using Lasso regression")
text(-1,3,substitute(r^2 == r2,list(r2=cor(test.y,lasso_pred))),adj=0)
text(-1,2.7,substitute(MSE == r2,list(r2=mse_lasso_1)),adj=0)
abline(0,1)
```
## Lasso Results: Normalized
```{r predict with normalized price, include= TRUE, results='markup'}
lasso_fit = glmnet(train.X,train.y,alpha = 1,lambda = lasso$lambda.min)
pred.y = predict(lasso_fit,test.X)
mse_lasso = mean((exp(pred.y)-exp(test.y))^2)
plot(test.y,pred.y,xlab="True normalized price",ylab="Predicted normalized price",
main="Prediction using Lasso regression")
text(-1,3,substitute(r^2 == r2,list(r2=cor(test.y,pred.y))),adj=0)
text(-1,2.7,substitute(MSE == r2,list(r2=mse_lasso)),adj=0)
abline(0,1)
r.2.lasso_2 <- r2(exp(pred.y), test$Price)
```
## Tree
```{r tree, results='markup'}
loadPkg("tree")
loadPkg("pROC")
# factors < 32 cats
mod.tree <-tree(factor(Price.cuts)~.,
data=subset(train, select=-c(Price, SellerG, Suburb, Date, Postcode, CouncilArea)))
p <- predict(mod.tree, test, type="class")
acc.tree <- sum(p == test$Price.cuts)/length(p)
cm.tree <- confusionMatrix(p, test$Price.cuts)
cm.tree$table
```
Overall Accuracy: `r acc.tree`
Poor prediction at higher prices
## Random Forest: Regression
```{r RF_reg}
loadPkg("randomForest")
# factors < 53 cats
mod.RF <- randomForest(Price~.,
data=subset(train, select=-c(Price.cuts, SellerG, Suburb, Date, Postcode)),
importance=T, ntree=200)
p.RF_reg <- predict(mod.RF, test)
r.2.RF <- r2(p.RF_reg, test$Price)
mse.RF <- mean((p.RF_reg - test$Price)^2)
```
Trees: 200
Variables: 5
$R^2$ = `r r.2.RF`
MSE = `r mse.RF`
## Random Forest: Categorical
```{r RF_cats, results='markup'}
# factors < 53 cats
mod.RF.cat <- randomForest(Price.cuts~.,
data=subset(train, select=-c(Price, SellerG, Suburb, Date, Postcode)),
importance=T, ntree=200)
p <- predict(mod.RF.cat, test)
acc.RF <- sum(p == test$Price.cuts, na.rm=T)/length(p)
cm.RF <- confusionMatrix(p, test$Price.cuts)
cm.RF$table
```
Trees: 200
Variables: 5
Overall Accuracy: `r acc.RF`
<!-- ```{r data, include=F} -->
<!-- set.seed(17) -->
<!-- train <- load_data(T) -->
<!-- test <- load_data(F) -->
<!-- ``` -->
<!-- ```{r tree, include=FALSE} -->
<!-- train_tree <- trees(train=train, test=test) -->
<!-- ``` -->
<!-- ```{r randomForest, include= FALSE} -->
<!-- forest_reg_r2 <- forest.reg(train = train, test = test) -->
<!-- forest_cat_acc <- forest.cat(train = train, test = test) -->
<!-- ``` -->
<!-- ```{r data, include=F} -->
<!-- set.seed(17) -->
<!-- train <- load_data(T) -->
<!-- test <- load_data(F) -->
<!-- ``` -->
```{r knn_data_setup, include=FALSE}
#Preparing Training data
train<-train[,c(21,2,12,8,14,17,18,20,19)]
train$Rooms<-as.factor(train$Rooms)
#Creating Dummy Variables for Categorical Variables
loadPkg('fastDummies')
train <- dummy_cols(train, select_columns = 'Rooms')
train <- dummy_cols(train, select_columns = 'Regionname')
train<-train[,-c(2,9)]
#Scaling Numeric Variables
train$Car<- as.numeric(scale(train$Car, center = TRUE, scale = TRUE))
train$Distance<- as.numeric(scale(train$Distance, center = TRUE, scale = TRUE))
train$BuildingArea<- as.numeric(scale(train$BuildingArea, center = TRUE, scale = TRUE))
train$Lattitude<- as.numeric(scale(train$Lattitude, center = TRUE, scale = TRUE))
train$Longtitude<- as.numeric(scale(train$Longtitude, center = TRUE, scale = TRUE))
train$Propertycount<- as.numeric(scale(train$Propertycount, center = TRUE, scale = TRUE))
Rooms_10<-rep(0,nrow(train))
train$Rooms_10<-Rooms_10
#Preparing Testing data
test<-test[,c(21,2,12,8,14,17,18,20,19)]
test$Rooms<-as.factor(test$Rooms)
#Creating Dummy Variables for Categorical Variables
test <- dummy_cols(test, select_columns = 'Rooms')
test <- dummy_cols(test, select_columns = 'Regionname')
test<-test[,-c(2,9)]
#Scaling Numeric Variables
test$Car<- as.numeric(scale(test$Car, center = TRUE, scale = TRUE))
test$Distance<- as.numeric(scale(test$Distance, center = TRUE, scale = TRUE))
test$BuildingArea<- as.numeric(scale(test$BuildingArea, center = TRUE, scale = TRUE))
test$Lattitude<- as.numeric(scale(test$Lattitude, center = TRUE, scale = TRUE))
test$Longtitude<- as.numeric(scale(test$Longtitude, center = TRUE, scale = TRUE))
test$Propertycount<- as.numeric(scale(test$Propertycount, center = TRUE, scale = TRUE))
#Labels
trainLabels <- train[, 1]
testLabels <- test[, 1]
```
```{r knn, include=F}
loadPkg("FNN")
#Model with best total accuracy
mel_pred <- knn(train =train[,-1], test = test[,-1], cl=trainLabels, k=13, prob=T)
loadPkg("caret")
cm = confusionMatrix(mel_pred, reference = testLabels )
ResultDf = data.frame( k=numeric(0), Total.Accuracy= numeric(0), row.names = NULL )
ResultDf<-ResultDf[nrow(ResultDf)+1,]
ResultDf$k<-13
ResultDf$Total.Accuracy<-cm$overall['Accuracy']
rownames(ResultDf)<-1
```
## Accuracy of k-NN
```{r knn_acc, results="asis"}
xkabledply(ResultDf, "Total Accuracy Summary")
```
## ROC for k-NN
```{r knn_roc, results='asis'}
knn_prob=attributes(mel_pred)$prob
test$knn_prob=knn_prob
h1 <- roc(Price.cuts~knn_prob, data=test)
auc(h1)
plot(h1)
```
View(mod.RF.cat)
mod.RF.cat$confusion
View(cm.tree)
View(mod.tree)
t.reg <- rbind(c("Method", "R^2", "MSE"),
c("BIC Selection", r.2.lm, mse.lm ),
c("Lasso", r.2.lasso_1, mse_lasso_1),
c("Lasso", r.2.lasso_2, mse_lasso),
c("Random Forest", r.2.RF, mse.RF))
t.reg
?round
round(r.2.lm, 2)
?scipen
?formatC
formatC(mse.lm, format="e", digits=2 )
t.reg <- rbind(c("Method", "R^2", "MSE"),
c("BIC Selection", round(r.2.lm, 2), formatC(mse.lm, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_1,2), formatC(mse_lasso_1, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_2,2), formatC(mse_lasso, format="e", digits=2 )),
c("Random Forest", round(r.2.RF,2), formatC(mse.RF), format="e", digits=2 ))
t.reg
formatC(mse.lm, format="e", digits=2 )
formatC(mse_lasso_1, format="e", digits=2 )
t.reg[,1:3]
xkabledply(t.reg[,1:3])
?xkabledply
View(xkabledply)
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return HTML table for display
#' @examples
#' library("xtable")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
#' xkabledply( ISLR::Hitters[1:5,] )
if (wide) { modelsmmrytable <- t(modelsmmrytable) }
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("stringi")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped", wide=FALSE) {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' Can also use as head for better display
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return HTML table for display
#' @examples
#' library("xtable")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
#' xkabledply( ISLR::Hitters[1:5,] )
if (wide) { modelsmmrytable <- t(modelsmmrytable) }
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos)
}
xkabledplyhead = function(df, rows=5, title="Head", digits = 4, pos="left", bso="striped") {
xkabledply(df[1:rows, ], title, digits, pos, bso, wide=FALSE)
}
xkabledplytail = function(df, rows=5, title="Tail", digits = 4, pos="left", bso="striped") {
trows = nrow(df)
xkabledply(df[ (trows-rows+1) : trows, ], title, digits, pos, bso, wide=FALSE)
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=TRUE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
df <- data.frame(vif(model))
names(df) <- "VIF"
if (wide) { df <- t(df) }
xkabledply(df, title=title, digits = digits, pos=pos, bso=bso )
}
unloadPkg(xtable)
unloadPkg(kableExtra)
unloadPkg(stringi)
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped", wide=FALSE) {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' Can also use as head for better display
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return HTML table for display
#' @examples
#' library("xtable")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
#' xkabledply( ISLR::Hitters[1:5,] )
if (wide) { modelsmmrytable <- t(modelsmmrytable) }
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos)
}
xkabledplyhead = function(df, rows=5, title="Head", digits = 4, pos="left", bso="striped") {
xkabledply(df[1:rows, ], title, digits, pos, bso, wide=FALSE)
}
xkabledplytail = function(df, rows=5, title="Tail", digits = 4, pos="left", bso="striped") {
trows = nrow(df)
xkabledply(df[ (trows-rows+1) : trows, ], title, digits, pos, bso, wide=FALSE)
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=TRUE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
df <- data.frame(vif(model))
names(df) <- "VIF"
if (wide) { df <- t(df) }
xkabledply(df, title=title, digits = digits, pos=pos, bso=bso )
}
xkabledply(t.reg[,1:3])
t.reg <- rbind(c("Method", "R^2", "MSE"),
c("BIC Selection", round(r.2.lm, 2), formatC(mse.lm, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_1,2), formatC(mse_lasso_1, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_2,2), formatC(mse_lasso, format="e", digits=2 )),
c("Random Forest", round(r.2.RF,2), formatC(mse.RF), format="e", digits=2 ))
xkabledply(t.reg[,1:3])
kable(t.reg[,1:3])
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("stringi")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped", wide=FALSE) {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' Can also use as head for better display
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return HTML table for display
#' @examples
#' library("xtable")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
#' xkabledply( ISLR::Hitters[1:5,] )
if (wide) { modelsmmrytable <- t(modelsmmrytable) }
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos)
}
xkabledplyhead = function(df, rows=5, title="Head", digits = 4, pos="left", bso="striped") {
xkabledply(df[1:rows, ], title, digits, pos, bso, wide=FALSE)
}
xkabledplytail = function(df, rows=5, title="Tail", digits = 4, pos="left", bso="striped") {
trows = nrow(df)
xkabledply(df[ (trows-rows+1) : trows, ], title, digits, pos, bso, wide=FALSE)
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=TRUE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
df <- data.frame(vif(model))
names(df) <- "VIF"
if (wide) { df <- t(df) }
xkabledply(df, title=title, digits = digits, pos=pos, bso=bso )
}
xkabledply(t.reg[,1:3])
t.reg <- rbind(c("BIC Selection", round(r.2.lm, 2), formatC(mse.lm, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_1,2), formatC(mse_lasso_1, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_2,2), formatC(mse_lasso, format="e", digits=2 )),
c("Random Forest", round(r.2.RF,2), formatC(mse.RF), format="e", digits=2 ))
names(t.reg) <- c("Method", "R^2", "MSE")
xkabledply(t.reg[,1:3])
names(t.reg) <- c("Method", "R^2", "MSE")
xkabledplyhead(t.reg)
xkabledplytail(t.reg)
xkabledplytail(t.reg[,1:3])
t.reg <- data.frame(rbind(c("BIC Selection", round(r.2.lm, 2), formatC(mse.lm, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_1,2), formatC(mse_lasso_1, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_2,2), formatC(mse_lasso, format="e", digits=2 )),
c("Random Forest", round(r.2.RF,2), formatC(mse.RF), format="e", digits=2 )))
names(t.reg) <- c("Method", "R^2", "MSE")
t.reg <- data.frame(rbind(c("BIC Selection", round(r.2.lm, 2), formatC(mse.lm, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_1,2), formatC(mse_lasso_1, format="e", digits=2 )),
c("Lasso", round(r.2.lasso_2,2), formatC(mse_lasso, format="e", digits=2 )),
c("Random Forest", round(r.2.RF,2), formatC(mse.RF), format="e", digits=2 ))[,1:3])
names(t.reg) <- c("Method", "R^2", "MSE")
xkabledply(t.reg)
xkabledply(ResultDf, "Total Accuracy Summary")
ResultDf
t.car <- data.frame(rbind(c("Tree", round(acc.tree, 3)),
c("Random Forest", round(acc.RF, 3)),
c("13-NN", 0.734)))
names(t.cat) <- c("Method", "Accuracy")
names(t.cat) <- c("Method", "Accuracy")
t.cat <- data.frame(rbind(c("Tree", round(acc.tree, 3)),
c("Random Forest", round(acc.RF, 3)),
c("13-NN", 0.734)))
names(t.cat) <- c("Method", "Accuracy")
xkabledply(t.cat)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = F)
options(scientific=T, digits = 5)
options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
source("P2_support.R", local = knitr::knit_global())
# run this chunk to load data so that we all use same data for training/testing
train <- load_data()
test <- load_data(F)
mod4 <-  lm(Price ~ Rooms
+ Distance  + Bathroom + Car + BuildingArea
+ Lattitude + Longtitude + Propertycount
+ factor(Regionname) , data=train)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = F)
options(scientific=T, digits = 5)
options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("leaps")
loadPkg("ggplot2")
loadPkg("gridExtra")
loadPkg("scales")
loadPkg("heatmaply")
loadPkg("Hmisc")
loadPkg("faraway")
set.seed(17)
data.full <- read.csv("melb_data.csv")
# create train and test data
samps <- read.csv("sample.txt", sep=" ")
data.train <- data.full[(samps$x),]
data.test <- data.full[(-samps$x),]
y.pred <- predict(mod4, test)
y.test <- test$Price
diff.sq = (y.pred - y.test)^2
keeps <- which(!is.na(diff.sq))
r2 <- function(y.predict, y.actual=y.test){
TSS <- sum((y.actual - mean(y.actual))^2)
RSS <- sum((y.predict - y.actual)^2)
rSq <- 1 - RSS/TSS
return(rSq)
}
r.2 <- r2(y.pred[keeps], y.test[keeps])
r.2
mean((y.pred-y.test)^2)
formatC(216294835487, format="e", digits=2 )
?scale
(831-704)/704
(831-734)/734
